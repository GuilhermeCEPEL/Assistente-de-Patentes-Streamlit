import streamlit as st
import os
import re
from PIL import Image
from time import sleep
import streamlit.components.v1 as components

from functions.agents_functions import *
from functions.sheet_functions import *
from functions.auxiliar_functions import *


def render_page3():

    # Construct the full form input for the recommender agent
    formulario = "\n".join([
        f"**Natureza da Ideia**",
        f"A ideia √© apenas um algoritmo isolado ou m√©todo matem√°tico: {'Sim' if st.session_state.questionsData['q1'] else 'N√£o'}",
        f"A ideia √© uma metodologia de ensino, gest√£o, neg√≥cios ou treinamento: {'Sim' if st.session_state.questionsData['q2'] else 'N√£o'}",
        f"A ideia √© puramente software (sem aplica√ß√£o t√©cnica espec√≠fica): {'Sim' if st.session_state.questionsData['q3'] else 'N√£o'}",
        f"**Crit√©rios de patenteabilidade**",
        f"A ideia resolve um problema t√©cnico com uma solu√ß√£o t√©cnica (ex: dispositivo, sistema f√≠sico, mecanismo)?: {'Sim' if st.session_state.questionsData['q4'] else 'N√£o'}",
        f"A solu√ß√£o √© nova? (N√£o existe algo igual j√° divulgado ou patenteado?): {'Sim' if st.session_state.questionsData['q5'] else 'N√£o'}",
        f"A solu√ß√£o √© inventiva? (N√£o √© √≥bvia para um t√©cnico no assunto?): {'Sim' if st.session_state.questionsData['q6'] else 'N√£o'}",
        f"Tem aplica√ß√£o industrial? (Pode ser fabricada, usada ou aplicada em algum setor produtivo?): {'Sim' if st.session_state.questionsData['q7'] else 'N√£o'}",
        f"A ideia j√° foi divulgada publicamente? (ex: redes sociais, eventos, artigos): {'Sim' if st.session_state.questionsData['q8'] else 'N√£o'}",
        f"H√° inten√ß√£o de comercializar ou licenciar essa ideia? {'Sim' if st.session_state.questionsData['q9'] else 'N√£o'}",
        f"Voc√™ j√° desenvolveu um prot√≥tipo ou MVP da solu√ß√£o? {'Sim' if st.session_state.questionsData['q10'] else 'N√£o'}",
    ])

    if 'recomendacao_gerada' not in st.session_state:
        with st.spinner("Gerando recomenda√ß√£o inicial com base no question√°rio..."):
            recomendacao = agente_recomendador(formulario)

            st.session_state['recomendacao_texto'] = recomendacao
            st.session_state['recomendacao_gerada'] = True

            data_to_save_df = info_to_data_frame(st.session_state.userData, st.session_state.questionsData, st.session_state.ideaData)
            append_data_to_sheet("Dados InovaFacil", data_to_save_df)

        with st.expander("üí° Veja a Recomenda√ß√£o Inicial sobre sua Ideia üí°", expanded=False):
            st.markdown("### Recomenda√ß√£o do Assistente")
            st.write(st.session_state['recomendacao_texto'])

    st.header("Descreva Detalhadamente Sua Ideia")
    st.write("Forne√ßa o m√°ximo de detalhes poss√≠vel nos campos abaixo para uma an√°lise mais precisa. Campos com * s√£o obrigat√≥rios.")

    st.session_state.ideaData['main'] = st.text_area(
        "‚ùì Descri√ß√£o da sua ideia ou inven√ß√£o (o que √©, para que serve, como funciona): *",
        value=st.session_state.ideaData['main'],
        height=180,
        help="Ex: '√â um sistema de irriga√ß√£o inteligente que utiliza sensores de umidade para otimizar o uso da √°gua em planta√ß√µes agr√≠colas, reduzindo o desperd√≠cio em at√© 30%.'"
    )

    st.session_state.ideaData['differential'] = st.text_area(
        "‚ùì Qual √© o diferencial ou inova√ß√£o da sua ideia? *",
        value=st.session_state.ideaData['differential'],
        height=150,
        help="Ex: 'Seu diferencial est√° no algoritmo preditivo que antecipa as necessidades h√≠dricas da planta com base em dados clim√°ticos e do solo, algo que as solu√ß√µes atuais n√£o oferecem.'"
    )

    st.session_state.ideaData['dev'] = st.text_area(
        "‚ùì Voc√™ j√° desenvolveu algo relacionado a essa ideia? (prot√≥tipo, c√≥digo, apresenta√ß√£o, etc.)",
        value=st.session_state.ideaData['dev'],
        height=120,
        help="Ex: 'Sim, desenvolvi um prot√≥tipo em escala reduzida e um software de controle em Python.'"
    )

    st.session_state.ideaData['sector'] = st.text_area(
        "‚ùì Qual √© o setor de aplica√ß√£o da sua ideia? *",
        value=st.session_state.ideaData['sector'],
        height=100,
        help="Ex: 'Agricultura, automa√ß√£o, energia renov√°vel.'"
    )

    are_description_fields_complete = (
        st.session_state.ideaData['main'].strip() and
        st.session_state.ideaData['differential'].strip() and
        st.session_state.ideaData['sector'].strip()
    )

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar", key="prev_page_button_3"):
            return -1  # Go back to the previous page
    with col2:
        if st.button("‚û°Ô∏è Analisar Ideia", key="next_page_button_3", disabled=not are_description_fields_complete):
            # Clear analysis related session state when moving to analysis page to ensure fresh run
            for key in ['resultado_da_avaliacao', 'resultado_da_busca', 'resultado_da_analise', 'proximos_passos_texto']:
                if key in st.session_state:
                    del st.session_state[key]
            return 1  # Indicate to move to the next page for analysis
