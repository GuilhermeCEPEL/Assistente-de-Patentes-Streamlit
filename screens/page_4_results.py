import streamlit as st
import os
import re
from PIL import Image

from datetime import date
from functions.agents_functions import *
from functions.sheet_functions import *
from functions.auxiliar_functions import *

def render_page4():

    repostas_descritivas = f"""
    **Descri√ß√£o da Ideia**
    Descri√ß√£o da ideia ou inven√ß√£o: {st.session_state.ideaData['main']}
    Qual √© o diferencial ou inova√ß√£o da sua ideia?: {st.session_state.ideaData['differential']}
    Voc√™ j√° desenvolveu algo (prot√≥tipo, c√≥digo, apresenta√ß√£o)?: {st.session_state.ideaData['dev']}
    Qual √© o setor de aplica√ß√£o?: {st.session_state.ideaData['sector']}
    """
    formulario_respostas = "\n".join([
        f"A ideia √© apenas um algoritmo isolado ou m√©todo matem√°tico: {'Sim' if st.session_state.questionsData['q1'] else 'N√£o'}",
        f"A ideia √© uma metodologia de ensino, gest√£o, neg√≥cios ou treinamento: {'Sim' if st.session_state.questionsData['q2'] else 'N√£o'}",
        f"A ideia √© puramente software (sem aplica√ß√£o t√©cnica espec√≠fica): {'Sim' if st.session_state.questionsData['q3'] else 'N√£o'}",
        f"A ideia resolve um problema t√©cnico com uma solu√ß√£o t√©cnica (ex: dispositivo, sistema f√≠sico, mecanismo)?: {'Sim' if st.session_state.questionsData['q4'] else 'N√£o'}",
        f"A solu√ß√£o √© nova? (N√£o existe algo igual j√° divulgado ou patenteado?): {'Sim' if st.session_state.questionsData['q5'] else 'N√£o'}",
        f"A solu√ß√£o √© inventiva? (N√£o √© √≥bvia para um t√©cnico no assunto?): {'Sim' if st.session_state.questionsData['q6'] else 'N√£o'}",
        f"Tem aplica√ß√£o industrial? (Pode ser fabricada, usada ou aplicada em algum setor produtivo?): {'Sim' if st.session_state.questionsData['q7'] else 'N√£o'}",
        f"A ideia j√° foi divulgada publicamente? (ex: redes sociais, eventos, artigos): {'Sim' if st.session_state.questionsData['q8'] else 'N√£o'}",
        f"H√° inten√ß√£o de comercializar ou licenciar essa ideia? {'Sim' if st.session_state.questionsData['q9'] else 'N√£o'}",
        f"Voc√™ j√° desenvolveu um prot√≥tipo ou MVP da solu√ß√£o? {'Sim' if st.session_state.questionsData['q10'] else 'N√£o'}",
    ])

    if not st.session_state.get("analise_realizada", False):
        with st.spinner("‚åõ Analisando as respostas... Por favor, aguarde."):
            resultado_da_busca, resultado_da_avaliacao, resultado_da_analise = analise_dos_resultados(repostas_descritivas, formulario_respostas)
        st.session_state['resultado_da_busca'] = resultado_da_busca
        st.session_state['resultado_da_avaliacao'] = resultado_da_avaliacao
        st.session_state['resultado_da_analise'] = resultado_da_analise
        
        st.session_state['analise_realizada'] = True 

        data_to_save_df = info_to_data_frame(st.session_state.userData, st.session_state.questionsData, st.session_state.ideaData)
        append_data_to_sheet("Dados InovaFacil", data_to_save_df)
    else:
        resultado_da_busca = st.session_state['resultado_da_busca']
        resultado_da_avaliacao = st.session_state['resultado_da_avaliacao']
        resultado_da_analise = st.session_state['resultado_da_analise']

    # Parse and display the evaluation result with scores and emojis
    if resultado_da_avaliacao and isinstance(resultado_da_avaliacao, str):
        # Try to split the first line as title, rest as text
        lines = resultado_da_avaliacao.strip().split('\n')
        titulo_avaliacao = lines[0] if lines else "Avalia√ß√£o n√£o dispon√≠vel"
        texto_avaliacao = "\n".join(lines[1:]) if len(lines) > 1 else ""

        # Extract score and text from the title if present (e.g., "8/10 - Avalia√ß√£o do Potencial de Prote√ß√£o")
        title_score_match = re.match(r"(\d+(?:\.\d+)?)/10\s*-?\s*(.*)", titulo_avaliacao)
        if title_score_match:
            titulo_score = float(title_score_match.group(1))
            titulo_text = title_score_match.group(2).strip()
            titulo_avaliacao = titulo_text
        else:
            titulo_score = None
        
        score_inovacao, just_inovacao = extract_score_and_justification(resultado_da_avaliacao, "Inova√ß√£o")
        score_originalidade, just_originalidade = extract_score_and_justification(resultado_da_avaliacao, "Originalidade")
        score_potencial, just_potencial = extract_score_and_justification(resultado_da_avaliacao, "Potencial de Propriedade Intelectual")
    else:
        titulo_avaliacao = "Avalia√ß√£o n√£o dispon√≠vel"
        texto_avaliacao = ""
        score_inovacao = score_originalidade = score_potencial = 0
        just_inovacao = just_originalidade = just_potencial = ""

    st.header("üìä Avalia√ß√£o do Potencial de Prote√ß√£o")
    # Display the score and text from the title in the subheader, with emoji and color
    if titulo_score is not None:
        color = "green" if titulo_score >= 7 else ("orange" if titulo_score >= 4 else "red")
        emoji = "‚úÖ" if titulo_score >= 7 else ("‚ö†Ô∏è" if titulo_score >= 4 else "‚ùå")
        st.markdown(f"<h3>{emoji} <span style='color:{color}'>{titulo_score}/10</span> ‚Äî {titulo_avaliacao}</h3>", unsafe_allow_html=True)
    else:
        st.subheader(titulo_avaliacao)

    display_score("Inova√ß√£o", score_inovacao, just_inovacao)
    display_score("Originalidade", score_originalidade, just_originalidade)
    display_score("Potencial de Propriedade Intelectual", score_potencial, just_potencial)

    st.markdown("---")

    # Display the detailed results in expanders
    with st.expander("üîç Propriedades Intelectuais Similares Encontradas"):
        st.markdown("#### Lista Detalhada de PIs Similares")
        if resultado_da_busca:
            st.write(resultado_da_busca)
        else:
            st.info("Ocrreu algum erro durante a busca por propriedade intelectual similares, favor rodar a an√°lise novamente.")

    with st.expander("üí° An√°lise Final e Recomenda√ß√µes Estrat√©gicas"):
        st.markdown("#### Conclus√£o e Pr√≥ximos Passos Sugeridos")
        if resultado_da_analise:
            st.write(resultado_da_analise)
        else:
            st.info("Ocrreu algum erro durante a an√°lise final est√° sendo processada, favor rodar a an√°lise novamente.")

    # Button to regenerate the analysis
    if st.button("üîÑ Reprocessar An√°lise", key="regenerate_analysis_button"):
        with st.spinner("Reprocessando an√°lise..."):
            resultado_da_busca, resultado_da_avaliacao, resultado_da_analise = analise_dos_resultados(repostas_descritivas, formulario_respostas)
        st.session_state['resultado_da_busca'] = resultado_da_busca
        st.session_state['resultado_da_avaliacao'] = resultado_da_avaliacao
        st.session_state['resultado_da_analise'] = resultado_da_analise
        st.success("An√°lise reprocessada com sucesso!")
        st.rerun()

    st.markdown("---")
    st.subheader("O que voc√™ deseja proteger?")
    st.write("Com base na an√°lise, selecione a categoria de prote√ß√£o mais adequada para sua ideia.")

    opcao = st.selectbox(
    "Escolha o tipo de prote√ß√£o para sua Propriedade Intelectual:",
    ("Selecione uma op√ß√£o", "Patente de Inven√ß√£o (PI)", "Modelo de Utilidade (MU)", "Programa de Computador (Software)"),
    key="combobox_proximos_passos"
    )

    # Only show "Pr√≥ximos passos" button if an option is selected
    if opcao != "Selecione uma op√ß√£o":
        st.session_state['opcao_selecionada'] = opcao  # Store the selected option in session state
        if st.button("Gerar Pr√≥ximos Passos Detalhados", key="prox_passos_button"):
            with st.spinner(f"Gerando os pr√≥ximos passos para {opcao}..."):
                proximos_passos = agente_de_pr√≥ximos_passos(f"Op√ß√£o selecionada: {opcao}\n\nAn√°lise Detalhada:\n{resultado_da_analise}")
            st.session_state['proximos_passos_texto'] = proximos_passos
            st.success("Pr√≥ximos passos gerados com sucesso!")

        # Always display the generated "proximos_passos_texto" if it exists in session_state
        if 'proximos_passos_texto' in st.session_state and st.session_state['proximos_passos_texto']:
            with st.expander("üìù Guia Detalhado para Prote√ß√£o", expanded=True):
                st.markdown("### Guia Detalhado para Prote√ß√£o:")
                st.write(st.session_state['proximos_passos_texto'])
    else:
        st.info("Por favor, selecione uma op√ß√£o para gerar os pr√≥ximos passos.")

    st.markdown("---")

    st.subheader("üìÑ Relat√≥rio INPI Provis√≥rio")
    st.write("Clique no bot√£o abaixo para gerar um relat√≥rio provis√≥rio com as informa√ß√µes coletadas e an√°lises realizadas. Este relat√≥rio pode ser usado como base para o envio ao INPI.")

    button_enabled = st.session_state.get('proximos_passos_texto')

    if st.button(
        "Gerar Relat√≥rio INPI Agora",
        key="trigger_report_generation",
        disabled=not button_enabled,
        use_container_width=True
    ):
        # Este bloco S√ì √© executado quando o bot√£o 'Gerar Relat√≥rio INPI Agora' √© clicado
        with st.spinner("Gerando relat√≥rio... Isso pode levar alguns segundos."):
            # Recupere as vari√°veis necess√°rias do session_state
            # √â fundamental que essas vari√°veis estejam armazenadas no session_state
            # pelas p√°ginas anteriores ou em um passo anterior desta p√°gina.
            # opcao_selecionada = st.session_state.get('opcao_de_protecao', "Patente de Inven√ß√£o") # Exemplo: nome da sua vari√°vel no session_state
            # respostas_descritivas_salvas = st.session_state.get('respostas_descritivas_geradas', "") # Exemplo
            # formulario_respostas_salvas = st.session_state.get('formulario_respostas_para_relatorio', "") # Exemplo

            # Chame a fun√ß√£o do agente de gera√ß√£o
            try:
                relatorio_gerado = generate_relatorio(opcao, repostas_descritivas, formulario_respostas)
                st.session_state.relatorio_texto_final = relatorio_gerado
                st.success("Relat√≥rio gerado com sucesso! Agora voc√™ pode baix√°-lo.")
                # Se desejar, force um rerun para habilitar o bot√£o de download imediatamente
                st.rerun()
            except Exception as e:
                st.error(f"Ocorreu um erro ao gerar o relat√≥rio: {e}")
                st.session_state.relatorio_texto_final = "" # Limpa para tentar novamente
    
    # Display the generated report in an expander if it exists
    if 'relatorio_texto_final' in st.session_state and st.session_state['relatorio_texto_final']:
        with st.expander("üìÑ Visualizar Relat√≥rio INPI Gerado", expanded=False):
            st.markdown("### Relat√≥rio INPI Gerado:")
            st.write(st.session_state['relatorio_texto_final'])

    relatorio_para_download = st.session_state.get('relatorio_texto_final', '').encode('utf-8')
    download_disabled = not bool(relatorio_para_download)

    if st.download_button(
        label="üíæ Baixar Relat√≥rio INPI (TXT)",
        key="final_download_report_button", # Mudei a chave para evitar conflito com a anterior
        data=relatorio_para_download,
        file_name=f"relatorio_inovafacil_{date.today()}.txt",
        mime="text/plain", # Use text/plain para arquivos .txt
        help="Baixe o relat√≥rio provis√≥rio gerado para o INPI.",
        use_container_width=True,
        disabled=download_disabled # Desabilita se n√£o houver relat√≥rio gerado
    ):
    # Este bloco √© executado DEPOIS que o download √© iniciado no navegador.
    # Nenhuma l√≥gica de gera√ß√£o deve estar aqui.
        pass

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar para Descri√ß√£o da Ideia", key="prev_page_button_4"):
            return -1
        
    with col2:
        # # Always generate a new report when the button is pressed
        # if st.download_button(
        #     label="üìÉ Gerar Relat√≥rio INPI",
        #     key="download_report_button",
        #     data=generate_relatorio(opcao, repostas_descritivas, formulario_respostas),
        #     file_name=f"relatorio_inovafacil_{date.today()}.txt",
        #     mime="text/txt",
        #     help="Baixe um relat√≥rio no formato requisitado pelo INPI.",
        #     use_container_width=True,
        #     disabled=button_disabled
        # ):
        #     pass
        
        if st.button("‚û°Ô∏è Finalizar e Enviar Respostas", key="finalize_button"):
            return 1